const { GraphQLObjectType, GraphQLID, GraphQLString, GraphQLList, GraphQLSchema } = require('graphql');
const { GraphQLDate } = require('graphql-iso-date');
const Reservation = require('./mongooseModel');


const ReservationType = new GraphQLObjectType({
  name: 'Reservation',
  fields: () => ({
    id: { type: GraphQLID },
    name: { type: GraphQLString },
    hotelName: { type: GraphQLString },
    arrivalDate: { type: GraphQLDate },
    departureDate: { type: GraphQLDate }
  })
});
 
const RootQueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    reservation: {
      type: ReservationType,
      args: {
        id: { type: GraphQLID }
      },
      resolve(parent, args) {
        return new Promise((resolve, reject) => {
          Reservation.findById(args.id, (err, reservation) => {
            if(err) reject(err);
            else resolve(reservation);
          })
        })
      }
    },
    reservations: {
      type: new GraphQLList(ReservationType),
      resolve() {
        return new Promise((resolve, reject) => {
          Reservation.find({}, (err, reservations) => {
            if(err) reject(err);
            else resolve(reservations);
          })
        })
      }
    }
  }
});

const RootMutationType = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    createReservation: {
      type: ReservationType,
      args: {
        name: { type: GraphQLString },
        hotelName: { type: GraphQLString },
        arrivalDate: { type: GraphQLDate },
        departureDate: { type: GraphQLDate }
      },
      resolve(parent, args){
        return new Promise((resolve, reject) => {
          const { name, hotelName, arrivalDate, departureDate } = args;
          Reservation.create({ name, hotelName, arrivalDate, departureDate }, (err, newReservation) => {
            if(err) reject(err);
            // for the purpose of this exercise, used mongodb's autogenerated id's to assign reservation id
            // alternatively, could create custom 'id' field and assign with uuid generator
            else resolve({id: newReservation.id});
          })
        })
      }
    }
  }
});

module.exports = new GraphQLSchema({
  query: RootQueryType,
  mutation: RootMutationType
});